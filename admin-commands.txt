MYSQL ADMINISTRATION COMMANDS
------------------------------

First of all, you need to edit your manager.conf to provide a valid administrator
credentials to be able to create and delete users and/or change their passwords.

1) Create a MySQL user

Syntax: MYSQL CREATE USER $username PASSWORD $base64_password FOR [hostname|*]

Example: MYSQL CREATE USER srvmgrtest PASSWORD dGVzdA== FOR localhost

         This will create the srvmgr user for localhost connection with
         password set to 'test' (dGVzdA== is base64 form of 'test' string)
         and then it will flush the privileges. The optional asterisk sign
         (*) can be used for access of all hosts to this one but this applied
         only when using TCP/IP connection since for UNIX socket connection
         type it's not being used.

2) Delete a MySQL user

Syntax: MYSQL DELETE USER $username FOR [hostname|*]

Example: MYSQL DELETE USER srvmgrtest FOR *

         This command will delete all users named 'srvmgrtest' on the host
         machine.

3) Limit queries for user

Syntax: <TBD>

Example: Will call "GRANT USAGE ON *.* TO 'user'@'host' WITH MAX_QUERIES_PER_HOUR 90;" as
         described in manual [http://dev.mysql.com/doc/refman/5.1/en/grant.html].

CRON COMMANDS
-------------

1) CREATE A CRON TABLE ENTRY

Syntax: CRON ADD $username "Min Hour Day Month DOW /path/to/command"

2) DELETE A CRON TABLE ENTRY

Syntax: CRON DELETE $username "Min Hour Day Month DOW /path/to/command"
Syntax: CRON REMOVE $username "Min Hour Day Month DOW /path/to/command"

3) TRUNCATE CRON TABLE

Syntax: CRON TRUNCATE $username

4) LIST TABLE

Syntax: CRON LIST $username $filename_to_store_to

GIT REPOSITORY COMMANDS (SCM-GIT):
----------------------------------

1) CREATE REPO

Syntax: SCM-GIT CREATE REPO $name [WITH DESCRIPTION $descr] [FOR $domain]

Purpose: Creates the git repository $name in the repo_dir with optional
         description $descr for domain (server) $domain.

Example: SCM-GIT CREATE REPO test WITH DESCRIPTION descr FOR domain.tld

         This will create git repository test.git in the repo_dir with
         description of 'descr' for domain domain.tld.

2) DELETE REPO

Syntax: SCM-GIT DELETE REPO $name

Purpose: Deletes the repository $name from repo_dir.

Example: SCM-GIT DELETE REPO test

         This command deletes the repository test.git from the repo_dir.

3) ALTER REPO

Syntax: SCM-GIT ALTER REPO test SET type new_value

where type can be either DESCRIPTION or SERVER. New value can be empty
to disable server limitations or delete the repository description.

Purpose: Allows to change the repo description or server.

Example: SCM-GIT ALTER REPO test SET SERVER
         SCM-GIT ALTER REPO test SET SERVER domain

         First command changes the repository test.git rules to be shown
         in gitweb of all the servers and second command limits the
         repository to be shown only for domain (server) 'domain'.

4) DAEMON ENABLE

Syntax: DAEMON ENABLE

Purpose: Ensures the init scripts exists and enables the Git daemon.

5) DAEMON DISABLE

Syntax: DAEMON DISABLE

Purpose: Disables the Git daemon.


SVN REPOSITORY COMMANDS (SCM-SVN):
----------------------------------

1) CREATE REPO

Syntax: SCM-SVN CREATE REPO $name [ALLOW-ALL | FOR $username PASSWORD $password]

Purpose: Creates a new subversion (SVN) repository $name with option to
         allow full access to all or not (ALLOW-ALL option). If you input
         "FOR $username PASSWORD $password" clause you will associate
         the repo with user $username which will be created if it doesn't
         exist or reused if it already exists.

Example: SCM-SVN CREATE REPO test ALLOW-ALL

         This command creates the SVN repository with read-write, i.e. full,
         access rights to all users.

2) DELETE REPO

Syntax: SCM-SVN DELETE REPO $name

Purpose: Deletes the subversion repository from the repo_dir.

Example: SCM-SVN DELETE REPO test

         This command deletes the repo named 'test' from the repo_dir.


BIND DAEMON COMMANDS (DNS-BIND)
-------------------------------

1) Domain zone creation

Syntax: DNS-BIND CREATE ZONE $domain_name

Purpose: Creates the new domain zone file and appends new file information into master file.

Example: DNS-BIND CREATE ZONE domain.tld

         This command will create empty (but check-working) zone file for domain domain.tld
         with appropriate entry added to the master file.

2) Domain record creation

Syntax: DNS-BIND CREATE $type RECORD $any_value FOR $name_with_domain_suffix

Purpose: Creates a new record of specified type and value to be appended to the domain
         zone file under name corresponding to the first token of $name_with_domain_suffix.

Example: DNS-BIND CREATE TXT RECORD some value even with spaces FOR name.domain.tld

         This command will create a new TXT record for domain domain.tld named as name
         (extracted from name.domain.tld) with value "some value even with spaces" and
         and the value will be appended to the domain zone file.

3) Domain zone deletion

Syntax: DNS-BIND DELETE ZONE domain.tld

Purpose: Deletes the previously created DNS zone.

4) Domain record deletion

Syntax: DNS-BIND DELETE RECORD record.domain.tld

Purpose: Deletes the previously created $record for zone domain.tld.

5) Domain zones dump

Syntax: DNS-BIND DUMP ZONES $output_filename

Purpose: Dumps all the zones available on the node and saves them into $output_filename.

6) Domain zone records dump

Syntax: DNS-BIND DUMP RECORDS $zone $output_filename

Purpose: Dumps all the zone records for $zone and saves them into $output_filename.

BUILTIN COMMANDS
----------------

1) Enabling port rule on machine using IPTABLES

Syntax: BUILTIN FIREWALL INSERT $port (TCP|UDP|BOTH) (ACCEPT|REJECT)

2) Disabling port rule on machine using IPTABLES

Syntax: BUILTIN FIREWALL DELETE $port (TCP|UDP|BOTH) (ACCEPT|REJECT)

3) Adding user

Syntax: BUILTIN USER ADD $name $password $groupName $description $home $shell

4) Adding group

Syntax: BUILTIN GROUP ADD $name
